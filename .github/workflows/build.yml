name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
    - '**/*.md'
    - '**/*.gitignore'
    - '**/*.gitattributes'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_MULTILEVEL_LOOKUP: 0
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  LAMBDA_FUNCTION: 'alexa-london-travel'
  LAMBDA_HANDLER: 'LondonTravel.Skill::MartinCostello.LondonTravel.Skill.AlexaFunction::HandlerAsync'
  LAMBDA_MEMORY: 256
  LAMBDA_ROLE: 'arn:aws:iam::492538393790:role/lambda_basic_execution'
  LAMBDA_RUNTIME: 'provided.al2'
  LAMBDA_TIMEOUT: 10
  NUGET_XMLDOC_MODE: skip

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        include:
          - os: macos-latest
            os_name: macos
          - os: ubuntu-latest
            os_name: linux
          - os: windows-latest
            os_name: windows

    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1

    - name: Build, Test and Package
      shell: pwsh
      run: ./build.ps1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    - uses: codecov/codecov-action@v1
      name: Upload coverage to Codecov
      with:
        file: ./artifacts/coverage.cobertura.xml
        flags: ${{ matrix.os_name }}

    - name: Publish artifacts
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-${{ matrix.os_name }}
        path: ./artifacts

    - name: Create Lambda ZIP file
      if: ${{ runner.os == 'Linux' }}
      run: |
        cd "./artifacts/publish" || exit
        chmod +x ./bootstrap
        zip -r "../${{ env.LAMBDA_FUNCTION }}.zip" . || exit 1

    - name: Publish deployment package
      uses: actions/upload-artifact@v2
      if: ${{ runner.os == 'Linux' }}
      with:
        name: lambda
        path: ./artifacts/${{ env.LAMBDA_FUNCTION }}.zip

  deploy-dev:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: dev
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: dev

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: lambda

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update function code
      run: |
        aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION }}-dev \
            --publish \
            --zip-file fileb://./${{ env.LAMBDA_FUNCTION }}.zip \
            > /dev/null

    - name: Update function configuration
      run: |
        aws lambda update-function-configuration \
            --function-name ${{ env.LAMBDA_FUNCTION }}-dev \
            --description "Deploy build ${{ github.run_number }} to AWS Lambda via GitHub Actions" \
            --handler ${{ env.LAMBDA_HANDLER }} \
            --memory-size ${{ env.LAMBDA_MEMORY }} \
            --role ${{ env.LAMBDA_ROLE }} \
            --runtime ${{ env.LAMBDA_RUNTIME }} \
            --timeout ${{ env.LAMBDA_TIMEOUT }} \
            > /dev/null

  deploy-prod:
    name: production
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: lambda

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update function code
      run: |
        aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION }} \
            --publish \
            --zip-file fileb://./${{ env.LAMBDA_FUNCTION }}.zip \
            > /dev/null

    - name: Update function configuration
      run: |
        aws lambda update-function-configuration \
            --function-name ${{ env.LAMBDA_FUNCTION }} \
            --description "Deploy build ${{ github.run_number }} to AWS Lambda via GitHub Actions" \
            --handler ${{ env.LAMBDA_HANDLER }} \
            --memory-size ${{ env.LAMBDA_MEMORY }} \
            --role ${{ env.LAMBDA_ROLE }} \
            --runtime ${{ env.LAMBDA_RUNTIME }} \
            --timeout ${{ env.LAMBDA_TIMEOUT }} \
            > /dev/null

  tests:
    name: End-to-end tests
    needs: deploy-prod
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1

    - name: Run end-to-end tests
      shell: pwsh
      run: dotnet test ./test/LondonTravel.Skill.EndToEndTests
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
